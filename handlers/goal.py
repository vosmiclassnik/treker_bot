import time
import threading

import telegram.constants
from telebot.types import Message
import datetime
from utils.logger import setup_logger
logger = setup_logger()


def register_handlers(bot, goals):
    @bot.message_handler(commands=['goal'])
    def set_goal(mess: Message):
        try:
            xyinya = mess.text.split()
            category = xyinya[1]
            target = xyinya[2]

            date = xyinya[3]
            deadline = datetime.datetime.strptime(date, '%d-%m-%Y').date()


            #–ø—Ä–æ–≤–µ—Ä–∫–∞
            tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            if deadline < tomorrow:
                raise ValueError("–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è!")

            goals.set_goal(mess.chat.id, category, target, deadline)
            text = f"üéØ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target} —á. –ø–æ {category} –¥–æ {deadline}"
            if int(target) >= 250 and int(target) < 500:
                text += f'\n–£—Ö, {target} —ç—Ç–æ –º–Ω–æ–≥–æ–≤–∞—Ç–æ, –Ω–æ –º—ã –≤ —Ç–µ–±—è –≤–µ—Ä–∏–º!üî•'
            elif int(target) > 500:
                raise ValueError('–ó–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 500')
            bot.send_message(mess.chat.id, text)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mess.chat.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª—å {target}—á –ø–æ {category} –¥–æ {deadline}')
        except ValueError as e:
            logger.warning(f'{mess.chat.id} —Å–¥–µ–ª–∞–ª –æ—à–∏–±–∫—É –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: {e}')
            bot.send_message(mess.chat.id, 'üéØ –ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å‚Ä¶ –Ω–æ –¥–ª—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–ª—å, –¥–∞–≤–∞–π –º–µ–Ω—å—à–µ 500... –ò–ª–∏ —Ç—ã —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–πüòÖ\n\n–í–æ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n<code>/goal –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–∞—Å—ã –¥–∞—Ç–∞</code>.\n<i>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</i>', parse_mode=telegram.constants.ParseMode.HTML)
        except Exception as e:
            bot.send_message(mess.chat.id, "üéØ –ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å‚Ä¶ –Ω–æ –í—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–µ –ø–æ–Ω—è–ª–∞ —Ç–µ–±—è üòÖ\n\n–í–æ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n<code>/goal –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–∞—Å—ã –¥–∞—Ç–∞</code>.\n<i>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</i>", parse_mode=telegram.constants.ParseMode.HTML)
            logger.error(f'–û—à–∏–±–∫–∞ –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mess.chat.id}: {e}')




    def send_deadlines():
        while True:
            now = datetime.date.today()
            spicok = goals.test_otput()
            for i in spicok:
                if str(i.deadline) == str(now):
                    try:

                        bot.send_message(i.user_telegram_id,  f"üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ü–µ–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {i.category} –Ω–µ –±—ã–ª–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.\n–ù–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è ‚Äî —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!")
                        goals.delete_deadline(i.user_telegram_id, i.category)
                        logger.info(f'–î–µ–¥–ª–∞–π–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i.user_telegram_id}')

                    except Exception as e:
                        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç {i.user_telegram_id}: {e}', exc_info=True)
            time.sleep(86400)

    threading.Thread(target=send_deadlines, daemon=True).start()
