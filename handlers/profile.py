import telebot.types
import telegram.constants
from telebot.types import Message
import os
import matplotlib.pyplot as plt
from collections import defaultdict
from study_bot.utils.logger import setup_logger
from study_bot.utils.achievements import achievements, check_absolute, check_first_goal
from study_bot.utils.streak import calculate_streak

logger = setup_logger()


def register_handlers(bot, users, achieve, goals, rassilka):
    @bot.message_handler(commands=['profile'])
    def profile(mess: Message):
        try:
            #—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton('üóë–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data='delete'))









            logger.info(f'/profile –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {mess.chat.id}')
            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dannye = defaultdict(int)
            vse_zapisi = users.statistica_polsovatelya(mess.chat.id)

            spicok_category = []
            summa = 0
            for i in vse_zapisi:
                category = i[4]
                colvo_chasov = i[3]
                dannye[category] += colvo_chasov
                summa += colvo_chasov
                spicok_category.append(category)
            true_category = list(set(spicok_category))

            check_absolute(bot, mess, achieve, summa)
            # –¥–∞—Ç–∞
            dates = [z[2] for z in vse_zapisi]
            last_activity = max(dates) if dates else None

            # streak

            zapisi = users.statistica_polsovatelya(mess.chat.id)
            dati = []
            for i in zapisi:
                dati.append(i[2])
            streak = calculate_streak(dati)







            # —Ç–µ—Ö—Ç
            flag = ''
            if last_activity:
                logger.info(f'/profile —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–µ—Ä–Ω–æ, –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {mess.chat.id}')
                text = f" üìä –í–æ—Ç –∫–∞–∫ —Ç—ã –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—à—å —Å–µ–±—è:\nüìÖ–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%d.%m.%Y')}\n"
                if streak == 0:
                    text += "–ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ä–∏—Ç–º! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫ üöÄ\n\n"
                elif streak == 1:
                    text += "–û–≥–æ, –Ω–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ –∫–æ–ø–∏–ª–∫–µ üéØ\n\n"
                elif streak < 5:
                    text += f"–£–∂–µ {streak} –¥–Ω—è –ø–æ–¥—Ä—è–¥ —É—á—ë–±—ã! –•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç üî•\n\n"
                elif streak < 10:
                    text += f"{streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ ‚Äî —Ç—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ! üìà\n\n"
                else:
                    text += f"{streak} –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤! –¢—ã –º–∞—à–∏–Ω–∞! ü§ñüìö –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!\n\n"
                for category, hours in dannye.items():
                    text += f"üìö {category} ‚Äî {hours} —á\n"
                text += f"\nüìà –í—Å–µ–≥–æ —É—á—ë–±—ã: {summa} —á\n"
                # —Ü–µ–ª–∏
                tseli = goals.select_goals(mess.chat.id)

                if not tseli:
                    text += "\nüéØ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.\n<code>/goal –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–∞—Å—ã –¥–∞—Ç–∞</code> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å\n"
                else:
                    text += "\nüéØ <b>–¶–µ–ª–∏:</b>\n"

                    for i in tseli:
                        try:
                            done = dannye[f'{i.category}']
                            percent = min(100, round(done / i.target * 100)) if i.target else 0
                            status = "‚úÖ" if percent >= 100 else "üìà"
                            text += (
                                f"{status} {i.category} ‚Äî {done}/{i.target} —á. "
                                f"({percent}%) –¥–æ {i.deadline.strftime('%d.%m.%Y')}\n"
                            )
                            if status == '‚úÖ':
                                goals.delete_deadline(mess.chat.id, i.category)
                                check_first_goal(bot, mess, achieve, status)
                        except Exception as e:
                            logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mess.chat.id}: {e}')
                            text += f"\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {i.category}.\n‚ûï <code>/add n [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]</code> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã\n\n"



                text += '\nüî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è üí™'
            else:
                logger.info('/profile —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–µ—Ä–Ω–æ, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mess.chat.id} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π')
                text = "\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n‚ûï <code>/add n [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]</code> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã"
                flag = True

            # –≥—Ä–∞—Ñ–∏–∫
            values = list(dannye.values())
            labels = list(dannye.keys())

            plt.pie(values, labels=labels, autopct='%1.1f%%', radius=0.9)
            plt.title(f'–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å @{mess.from_user.username}')

            plt.savefig('allcategories.png')
            file = open('./allcategories.png', 'rb')
            if flag:
                bot.send_message(mess.chat.id, text, reply_markup=markup, parse_mode=telegram.constants.ParseMode.HTML, )
            else:
                bot.send_photo(mess.chat.id, file)
                bot.send_message(mess.chat.id, text, reply_markup=markup, parse_mode=telegram.constants.ParseMode.HTML )
                os.remove('./allcategories.png')
                plt.clf()





        except Exception as e:
            logger.error(f'–í –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mess.chat.id}: {e}', exc_info=True)
            bot.send_message(mess.chat.id,'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')




    @bot.callback_query_handler(func=lambda call: True)
    def c(call):
        if call.data == 'delete':
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(telebot.types.KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"), telebot.types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

            bot.send_message(call.message.chat.id, "–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å? üóëÔ∏è", reply_markup=markup)

    @bot.message_handler(func=lambda msg: msg.text in ["‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"])
    def handle_delete_response(message):
        if message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å":
            users.delete_user_users(message.chat.id)
            achieve.delete_user_achieve(message.chat.id)
            goals.delete_user_goals(message.chat.id)
            rassilka.delete_user_rassilka(message.chat.id)
            bot.send_message(
                message.chat.id,
                "üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
                reply_markup=telebot.types.ReplyKeyboardRemove()
            )
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É–¥–∞–ª–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ./start –∏–ª–∏ /help –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º",
                reply_markup=telebot.types.ReplyKeyboardRemove()
            )
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è')
